#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

check_sdwdate_terminate_tail() {
   trap "error_handler" ERR

   if [ "$tail_pid" = "" ]; then
      return 0
   fi

   local MSG="<p>Stopping watching /var/log/sdwdate.log...</p>"
   $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"

   ## || true is required when tail existed in meanwhile.
   ## (Console window closed.)
   kill -sigterm "$tail_pid" || true

   local MSG="<p>Stopped watching /var/log/sdwdate.log.</p>"
   $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
}

check_sdwdate_status() {
   trap "error_handler" ERR

   local pid_file="/var/run/sdwdate/pid"
   local done_file="/var/run/sdwdate/done"
   local success_file="/var/run/sdwdate/success"

   if [ ! -f "$pid_file" ]; then
      SDWDATE_STATUS="NO_PID_FILE"
      return 0
   fi

   local ps_p_exit_code
   ps_p_exit_code="0"
   ps -p "$(cat "$pid_file")" >/dev/null || { ps_p_exit_code="$?"; true; };

   if [ ! "$ps_p_exit_code" = "0" ]; then
      SDWDATE_STATUS="NO_PID_PROCESS"
      return 0
   fi

   if [ -f "$success_file" ]; then
      SDWDATE_STATUS="SUCCESS"
      return 0
   fi

   if [ -f "$done_file" ]; then
      SDWDATE_STATUS="DONE"
      return 0
   fi

   SDWDATE_STATUS="RUNNING"
}

check_sdwdate() {
   trap "error_handler" ERR

   if [ -d /usr/share/whonix ]; then
      local HELPTEXT="<p>See logfile: tail -f -n 20 /var/log/sdwdate.log
<br></br>See status files: cd /var/run/sdwdate && dir
<br></br>Try again: <blockquote>Start menu -> Applications -> System -> Timesync
           <br></br>or in Terminal: timesync</blockquote></p>
<p>Last resort: manually set the clock! (In UTC!):
             <blockquote>sudo su
             <br></br>date -s \"17 FEB 2012 24:00:00\" && hwclock -w</blockquote></p>"
   else
      local HELPTEXT="<p>See logfile: tail -f -n 20 /var/log/sdwdate.log
<br></br>See status files: cd /var/run/sdwdate && dir
<br></br>Try again: <blockquote>Start menu -> Applications -> System -> Timesync
           or in Terminal: timesync</blockquote></p>
<p>Last resort: manually set the clock!:
             <blockquote>sudo su
             <br></br>date -s \"17 FEB 2012 24:00:00\" && hwclock -w</blockquote></p>"
   fi

   local TIMESANITYCHECK_STATUS
   TIMESANITYCHECK_STATUS="0"
   ## There is an exception in /etc/sudoers.d/timesanitycheck.
   sudo service timesanitycheck status >/dev/null 2>&1 || { TIMESANITYCHECK_STATUS="$?" ; true; };

   if [ "$TIMESANITYCHECK_STATUS" = "0" ]; then
      TIMESANITYCHECK_STATUS_WORD="Success"
   else
      TIMESANITYCHECK_STATUS_WORD="Fail"
   fi

   PROGRESS="$(( $PROGRESS + 1 ))"
   ## sdwdate does not reports status (by dispatching the dispatchers) itself,
   ## because we restarted sdwdate with "sudo service sdwdate restartnd". (The
   ## "nd" in "restartnd" means "no dispatch". Therefore we let timsync move
   ## the progress bar.
   $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "$PROGRESS"

   TIME_END="$(date +%s)"
   TIME_DIFF="$(( $TIME_END - $TIME_START ))"

   ## sdwdate uses a timeout of 180 seconds per curl connection.
   ## There are three curl connections in total, which would equal 540 seconds in total.
   ## This timeout should not be hit often anyway. Only in case sdwdate neither returns
   ## success nor failure.
   WAIT_MIN="580"

   WAIT_RESULT="$(( $WAIT_MIN - $TIME_DIFF ))"

   check_sdwdate_status
   #echo "SDWDATE_STATUS: $SDWDATE_STATUS"

   if [ "$SDWDATE_STATUS" = "NO_PID_FILE" ] || [ "$SDWDATE_STATUS" = "NO_PID_PROCESS" ]; then
      ## If there is no pid file or no process after we restarted sdwdate, it is a bug.
      check_sdwdate_terminate_tail
      local MSG="<p><b>Network Time Synchronization (timesync) failed!!!</b>
<br></br>TIMESANITYCHECK_STATUS: $TIMESANITYCHECK_STATUS_WORD
<br></br>$SDWDATE_STATUS Please report this bug!</p>

<p>$HELPTEXT</p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   if [ "$SDWDATE_STATUS" = "SUCCESS" ]; then
      local success_file="/var/run/sdwdate/success"
      local SUCCESS_TIME
      SUCCESS_TIME="$(date -r "$success_file")"

      if [ "$TIMESANITYCHECK_STATUS" = "0" ]; then
         ## Ok.
         check_sdwdate_terminate_tail
         local MSG="<p>Last run (on $SUCCESS_TIME) of Network Time Synchronization (timesync) was successful.</p>"
         if [ "$manualrun" = "1" ]; then
            ## When manually started, always use an active popup.
            $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
            $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
            ## When manually started, ask for donation.
            local MSG="<p>Please donate:
<br></br><a href=https://www.whonix.org/wiki/Donate>https://www.whonix.org/wiki/Donate</a></p>"
            $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
            $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
         elif [ "$DAEMON" = "1" ]; then
            true "No success message in daemon mode."
         ## See timesync_pre for a comment on the (SDW_)MODE variable.
         elif [ "$MODE" = "restartup" ]; then
            true "No success message when in SDW_MODE restartup."
         elif [ "$MODE" = "daemon" ]; then
            true "No success message when in SDW_MODE daemon."
         elif [ "$AUTOSTARTED" = "1" ]; then
            ## Only use an passive popup when automatically started.
            $output ${output_opts[@]} --passivepopupqueuex --typex "info" --titlex "$TITLE" --message "$MSG" --done
            $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
         else
            local MSG="<p>$MSG
<br></br>Neither manualrun ($manualrun), nor DAEMON ($DAEMON), nor AUTOSTARTED ($AUTOSTARTED). Please report this bug!</p>"
            $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
            $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
         fi
         return 0
      else
         ## Something went wrong.
         check_sdwdate_terminate_tail
         local MSG="<p><b>The clock is not sane,</b>
<br></br>although last run (on $SUCCESS_TIME) of Network Time Synchronization (timesync) was successful.
<br></br>Please report this bug!</p>

<p>Either timesync has a bug or this is an attack. Better manually set your clock!!!</p>

<p>$HELPTEXT</p>"
         $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
         return 0
      fi
   fi

   if [ "$SDWDATE_STATUS" = "DONE" ]; then
      if [ "$TIMESANITYCHECK_STATUS" = "0" ]; then
         ## sdwdate done, but no success. The clock is sane. This should rarely happen,
         ## only in case the internet connection was down at this point.
         check_sdwdate_terminate_tail
         if [ -d /usr/share/whonix ]; then
            local MSG="<p><b>Network Time Synchronization (timesync) done, but no success!!!</b>
<br></br>Is your internet connection down?</p>

<p>Test your internet connection: <blockquote>Start menu -> Applications -> System -> Whonixcheck
                               or in Terminal: whonixcheck
                               or in Terminal with debugging: whonixcheck -v</blockquote></p>

<p>$HELPTEXT</p>"
         else
            local MSG="<p><b>Network Time Synchronization (timesync) done, but no success!!!</b>
<br></br>Is your internet connection down?</p>

<p>Test your internet connection.</p>
<p>$HELPTEXT</p>"
         fi
         $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
         return 0
      else
         check_sdwdate_terminate_tail
         local MSG="<p><b>Network Time Synchronization (timesync) done, but no success!!!</b>
<br></br>Is your host clock slow or fast? If so, please power off, fix your host clock and restart.
<br></br>If your host clock is sane, please report a bug.</p>

<p>$HELPTEXT</p>"
         $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
         return 0
      fi
   fi

   #echo "check_sdwdate debug info: WAIT_RESULT: $WAIT_RESULT"

   if [ "$WAIT_RESULT" -gt "0" ]; then
      #echo "check_sdwdate debug info: Not done. Waiting up to $WAIT_RESULT more seconds."
      sleep "7" &
      lastpid="$!"
      wait "$lastpid" || true
      check_sdwdate
      return 0
   fi

   ## This following code should get rarely hit, only in case of a bug,
   ## only in case sdwdate does return neither success nor failure.
   ## Should not happen, because sdwdate has its own timeout.
   check_sdwdate_terminate_tail
   local MSG="<p><b>Network Time Synchronization failed!!!</b>
<br></br>SDWDATE_STATUS: $SDWDATE_STATUS
<br></br>TIMESANITYCHECK_STATUS: $TIMESANITYCHECK_STATUS_WORD
<br></br>Please report this bug!</p>

<p>$HELPTEXT</p>"
   $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
   $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
   return 0
}
