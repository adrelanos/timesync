#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## {{ ex_funct

## This function gets called by trap_sigterm (ex: zenity cancel button),
## trap_sigint (ex: ctrl + c) and error_handler.

ex_funct() {
   trap "error_handler" ERR

   ## Deactivate traps, so when pressing ctrl + c several times this won't
   ## create an endless loop.
   trap - SIGTERM
   trap - SIGINT

   ## kill $lastpid (if running)
   process_killer_helper

   lastpid="$tail_pid"
   ## kill $lastpid (if running)
   process_killer_helper

   ## Check if $output command has been already defined. This is not the case,
   ## when the script is terminated very early.
   local command_v_output_exit_code
   command_v_output_exit_code="0"
   command -v "$output" >/dev/null || { command_v_output_exit_code="$?" ; true; };
   if [ "$command_v_output_exit_code" = "0" ]; then
      $output ${output_opts[@]} --progressbaridx "$progressbaridx_main" --progressx "100"
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
      $output ${output_opts[@]} --messagex --done
      $output ${output_opts[@]} --messagecli --done
   fi
   exit 0
}

## }}

trap_sigterm() {
   trap "error_handler" ERR

   echo "$SCRIPTNAME: SIGTERM received. Cleaning up... Exiting..."
   ex_funct
}

trap "trap_sigterm" SIGTERM

trap_sigint() {
   trap "error_handler" ERR

   echo "$SCRIPTNAME: SIGTERM received. Cleaning up... Exiting..."
   ex_funct
}

trap "trap_sigint" SIGINT

cleanup() {
   trap "error_handler" ERR

   true "cleanup function..."

   $output ${output_opts[@]} --progressbaridx "$progressbaridx_main" --progressx "100"

   sync

   ## The "Please feel free to press <enter> to return back to your normal prompt."
   ## message is not necessary when manually started.
   if [ ! "$manualrun" = "1" ]; then
      ## Not manually started.

      local output_status_exit_code
      output_status_exit_code="0"
      $output ${output_opts[@]} --identifier "$IDENTIFIER" --status --messagecli || { output_status_exit_code="$?" ; true; };

      if [ "$output_status_exit_code" = "0" ]; then
         ## We have messages to show.
         ## Add press enter to return back to your normal prompt message below.
         local MSG="<p>Please feel free to press <enter> to return back to your normal prompt.</p>"
         $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
      elif [ "$output_status_exit_code" = "1" ]; then
         true "<p>No messages for --messagecli in the queue. Not adding press enter to return back to your normal prompt message below.</p>"
      else
         local MSG="<p><b>$output returned $output_status_exit_code.</b> Please report this bug!</p>"
         $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      fi
   fi

   $output ${output_opts[@]} --messagex --done
   $output ${output_opts[@]} --messagecli --done

   ## default exit code
   if [ "$EXIT_CODE" = "" ]; then
      EXIT_CODE="0"
   fi

   true "END"
   exit "$EXIT_CODE"
}
